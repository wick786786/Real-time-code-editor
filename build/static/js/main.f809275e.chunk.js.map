{"version":3,"sources":["Actions.js","pages/Home.js","components/Client.js","components/Editor.js","pages/EditorPage.js","socket.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","JOIN","JOINED","DISCONNECTED","CODE_CHANGE","SYNC_CODE","LEAVE","Home","navigate","useNavigate","roomId","setRoomId","useState","username","setUsername","joinRoom","concat","state","toast","error","handleInputEnter","e","code","React","createElement","className","src","alt","type","placeholder","onChange","target","value","onKeyUp","onClick","preventDefault","id","uuidV4","success","href","Client","_ref","Avatar","name","size","round","Editor","socketRef","onCodeChange","editorRef","useRef","useEffect","async","current","Codemirror","fromTextArea","document","getElementById","mode","json","theme","autoCloseTags","autoCloseBrackets","lineNumbers","on","instance","changes","origin","getValue","emit","ACTIONS","init","_ref2","setValue","off","EditorPage","codeRef","location","useLocation","useParams","reactNavigator","clients","setClients","_location$state","handleErrors","console","log","io","process","REACT_APP_BACKEND_URL","force new connection","reconnectionAttempt","timeout","transports","initSocket","err","_location$state2","socketId","prev","filter","client","disconnect","map","key","navigator","clipboard","writeText","Navigate","to","App","Fragment","Toaster","position","toastOptions","primary","BrowserRouter","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4JASAA,EAAOC,QATS,CACZC,KAAM,OACNC,OAAQ,SACRC,aAAc,eACdC,YAAa,cACbC,UAAW,YACXC,MAAO,iJCiFIC,MAlFFA,KACT,MAAMC,EAAWC,eAEVC,EAAQC,GAAaC,mBAAS,KAC9BC,EAAUC,GAAeF,mBAAS,IAQnCG,EAAWA,KACRL,GAAWG,EAMhBL,EAAQ,WAAAQ,OAAYN,GAAU,CAC1BO,MAAO,CACHJ,cAPJK,IAAMC,MAAM,mCAYdC,EAAoBC,IACP,UAAXA,EAAEC,MACFP,KAGR,OACIQ,IAAAC,cAAA,OAAKC,UAAU,mBACXF,IAAAC,cAAA,OAAKC,UAAU,eACXF,IAAAC,cAAA,OACIC,UAAU,eACVC,IAAI,iBACJC,IAAI,mBAERJ,IAAAC,cAAA,MAAIC,UAAU,aAAY,4BAC1BF,IAAAC,cAAA,OAAKC,UAAU,cACXF,IAAAC,cAAA,SACII,KAAK,OACLH,UAAU,WACVI,YAAY,UACZC,SAAWT,GAAMV,EAAUU,EAAEU,OAAOC,OACpCA,MAAOtB,EACPuB,QAASb,IAEbG,IAAAC,cAAA,SACII,KAAK,OACLH,UAAU,WACVI,YAAY,WACZC,SAAWT,GAAMP,EAAYO,EAAEU,OAAOC,OACtCA,MAAOnB,EACPoB,QAASb,IAEbG,IAAAC,cAAA,UAAQC,UAAU,cAAcS,QAASnB,GAAU,QAGnDQ,IAAAC,cAAA,QAAMC,UAAU,cAAa,+CAEzBF,IAAAC,cAAA,KACIU,QA1DDb,IACnBA,EAAEc,iBACF,MAAMC,EAAKC,cACX1B,EAAUyB,GACVlB,IAAMoB,QAAQ,uBAuDMC,KAAK,GACLd,UAAU,gBACb,eAMbF,IAAAC,cAAA,cACID,IAAAC,cAAA,UAAI,uCAEAD,IAAAC,cAAA,KAAGe,KAAK,iCAAgC,8CCpE7CC,MATAC,IAAkB,IAAjB5B,SAAEA,GAAU4B,EACxB,OACIlB,IAAAC,cAAA,OAAKC,UAAU,UACXF,IAAAC,cAACkB,IAAM,CAACC,KAAM9B,EAAU+B,KAAM,GAAIC,MAAM,SACxCtB,IAAAC,cAAA,QAAMC,UAAU,YAAYZ,yDCiDzBiC,MA/CAL,IAAyC,IAAxCM,UAAEA,EAASrC,OAAEA,EAAMsC,aAAEA,GAAcP,EAC/C,MAAMQ,EAAYC,iBAAO,MA2CzB,OA1CAC,oBAAU,MACNC,iBACIH,EAAUI,QAAUC,IAAWC,aAC3BC,SAASC,eAAe,kBACxB,CACIC,KAAM,CAAEf,KAAM,aAAcgB,MAAM,GAClCC,MAAO,UACPC,eAAe,EACfC,mBAAmB,EACnBC,aAAa,IAIrBd,EAAUI,QAAQW,GAAG,SAAU,CAACC,EAAUC,KACtC,MAAMC,OAAEA,GAAWD,EACb5C,EAAO2C,EAASG,WACtBpB,EAAa1B,GACE,aAAX6C,GACApB,EAAUM,QAAQgB,KAAKC,IAAQlE,YAAa,CACxCM,SACAY,WAKhBiD,IACD,IAEHpB,oBAAU,KACFJ,EAAUM,SACVN,EAAUM,QAAQW,GAAGM,IAAQlE,YAAaoE,IAAc,IAAblD,KAAEA,GAAMkD,EAClC,OAATlD,GACA2B,EAAUI,QAAQoB,SAASnD,KAKhC,KACHyB,EAAUM,QAAQqB,IAAIJ,IAAQlE,eAEnC,CAAC2C,EAAUM,UAEP9B,IAAAC,cAAA,YAAUY,GAAG,6BCiFTuC,MAzHIA,KACf,MAAM5B,EAAYG,iBAAO,MACnB0B,EAAU1B,iBAAO,MACjB2B,EAAWC,eACXpE,OAAEA,GAAWqE,cACbC,EAAiBvE,eAChBwE,EAASC,GAActE,mBAAS,IAsEvC,OApEAuC,oBAAU,KACOC,WAAY,IAAA+B,EAKrB,SAASC,EAAa/D,GAClBgE,QAAQC,IAAI,eAAgBjE,GAC5BH,IAAMC,MAAM,8CACZ6D,EAAe,KAPnBjC,EAAUM,aCrBID,UAOfmC,YAAGC,8CAAYC,sBANN,CACZC,wBAAwB,EACxBC,oBAAqB,WACrBC,QAAS,IACTC,WAAY,CAAC,eDgBiBC,GAC1B/C,EAAUM,QAAQW,GAAG,gBAAkB+B,GAAQX,EAAaW,IAC5DhD,EAAUM,QAAQW,GAAG,iBAAmB+B,GAAQX,EAAaW,IAQ7DhD,EAAUM,QAAQgB,KAAKC,IAAQrE,KAAM,CACjCS,SACAG,SAAwB,QAAhBsE,EAAEN,EAAS5D,aAAK,IAAAkE,OAAA,EAAdA,EAAgBtE,WAI9BkC,EAAUM,QAAQW,GACdM,IAAQpE,OACRuC,IAAqC,IAAAuD,EAAA,IAApCf,QAAEA,EAAOpE,SAAEA,EAAQoF,SAAEA,GAAUxD,EACxB5B,KAA2B,QAAnBmF,EAAKnB,EAAS5D,aAAK,IAAA+E,OAAA,EAAdA,EAAgBnF,YAC7BK,IAAMoB,QAAO,GAAAtB,OAAIH,EAAQ,sBACzBwE,QAAQC,IAAG,GAAAtE,OAAIH,EAAQ,aAE3BqE,EAAWD,GACXlC,EAAUM,QAAQgB,KAAKC,IAAQjE,UAAW,CACtCiB,KAAMsD,EAAQvB,QACd4C,eAMZlD,EAAUM,QAAQW,GACdM,IAAQnE,aACRqE,IAA4B,IAA3ByB,SAAEA,EAAQpF,SAAEA,GAAU2D,EACnBtD,IAAMoB,QAAO,GAAAtB,OAAIH,EAAQ,oBACzBqE,EAAYgB,GACDA,EAAKC,OACPC,GAAWA,EAAOH,WAAaA,OAMpD1B,GACO,KACHxB,EAAUM,QAAQgD,aAClBtD,EAAUM,QAAQqB,IAAIJ,IAAQpE,QAC9B6C,EAAUM,QAAQqB,IAAIJ,IAAQnE,gBAEnC,IAgBE0E,EAAS5D,MAKVM,IAAAC,cAAA,OAAKC,UAAU,YACXF,IAAAC,cAAA,OAAKC,UAAU,SACXF,IAAAC,cAAA,OAAKC,UAAU,cACXF,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAAA,OACIC,UAAU,YACVC,IAAI,iBACJC,IAAI,UAGZJ,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,OAAKC,UAAU,eACVwD,EAAQqB,IAAKF,GACV7E,IAAAC,cAACgB,EAAM,CACH+D,IAAKH,EAAOH,SACZpF,SAAUuF,EAAOvF,cAKjCU,IAAAC,cAAA,UAAQC,UAAU,cAAcS,QAvC5CkB,iBACI,UACUoD,UAAUC,UAAUC,UAAUhG,GACpCQ,IAAMoB,QAAQ,6CAChB,MAAOyD,GACL7E,IAAMC,MAAM,8BACZkE,QAAQlE,MAAM4E,MAiC2C,gBAGrDxE,IAAAC,cAAA,UAAQC,UAAU,eAAeS,QAhC7C,WACI8C,EAAe,OA+B8C,UAIzDzD,IAAAC,cAAA,OAAKC,UAAU,cACXF,IAAAC,cAACsB,EAAM,CACHC,UAAWA,EACXrC,OAAQA,EACRsC,aAAe1B,IACXsD,EAAQvB,QAAU/B,OApC3BC,IAAAC,cAACmF,IAAQ,CAACC,GAAG,OEvDbC,MA5Bf,WACI,OACItF,IAAAC,cAAAD,IAAAuF,SAAA,KACIvF,IAAAC,cAAA,WACID,IAAAC,cAACuF,UAAO,CACJC,SAAS,YACTC,aAAc,CACV3E,QAAS,CACLsB,MAAO,CACHsD,QAAS,gBAM7B3F,IAAAC,cAAC2F,IAAa,KACV5F,IAAAC,cAAC4F,IAAM,KACH7F,IAAAC,cAAC6F,IAAK,CAACC,KAAK,IAAIC,QAAShG,IAAAC,cAACjB,EAAI,QAC9BgB,IAAAC,cAAC6F,IAAK,CACFC,KAAK,kBACLC,QAAShG,IAAAC,cAACmD,EAAU,YCf7B6C,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAtG,EAAA,GAAAuG,KAAAD,EAAAE,KAAA,WAAqBD,KAAKnF,IAAiD,IAAhDqF,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASzF,EACpEqF,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDdU,IAASC,OACP7G,IAAAC,cAACD,IAAM8G,WAAU,KACf9G,IAAAC,cAACqF,EAAG,OAENrD,SAASC,eAAe,SAM1B+D","file":"static/js/main.f809275e.chunk.js","sourcesContent":["const ACTIONS = {\n    JOIN: 'join',\n    JOINED: 'joined',\n    DISCONNECTED: 'disconnected',\n    CODE_CHANGE: 'code-change',\n    SYNC_CODE: 'sync-code',\n    LEAVE: 'leave',\n};\n\nmodule.exports = ACTIONS;\n","import React, { useState } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport toast from 'react-hot-toast';\nimport { useNavigate } from 'react-router-dom';\n\nconst Home = () => {\n    const navigate = useNavigate();\n\n    const [roomId, setRoomId] = useState('');\n    const [username, setUsername] = useState('');\n    const createNewRoom = (e) => {\n        e.preventDefault();\n        const id = uuidV4();\n        setRoomId(id);\n        toast.success('Created a new room');\n    };\n\n    const joinRoom = () => {\n        if (!roomId || !username) {\n            toast.error('ROOM ID & username is required');\n            return;\n        }\n\n        // Redirect\n        navigate(`/editor/${roomId}`, {\n            state: {\n                username,\n            },\n        });\n    };\n\n    const handleInputEnter = (e) => {\n        if (e.code === 'Enter') {\n            joinRoom();\n        }\n    };\n    return (\n        <div className=\"homePageWrapper\">\n            <div className=\"formWrapper\">\n                <img\n                    className=\"homePageLogo\"\n                    src=\"/code-sync.png\"\n                    alt=\"code-sync-logo\"\n                />\n                <h4 className=\"mainLabel\">Paste invitation ROOM ID</h4>\n                <div className=\"inputGroup\">\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"ROOM ID\"\n                        onChange={(e) => setRoomId(e.target.value)}\n                        value={roomId}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <input\n                        type=\"text\"\n                        className=\"inputBox\"\n                        placeholder=\"USERNAME\"\n                        onChange={(e) => setUsername(e.target.value)}\n                        value={username}\n                        onKeyUp={handleInputEnter}\n                    />\n                    <button className=\"btn joinBtn\" onClick={joinRoom}>\n                        Join\n                    </button>\n                    <span className=\"createInfo\">\n                        If you don't have an invite then create &nbsp;\n                        <a\n                            onClick={createNewRoom}\n                            href=\"\"\n                            className=\"createNewBtn\"\n                        >\n                            new room\n                        </a>\n                    </span>\n                </div>\n            </div>\n            <footer>\n                <h4>\n                    Built with ðŸ’› &nbsp; by &nbsp;\n                    <a href=\"https://github.com/codersgyan\">Coder's Gyan</a>\n                </h4>\n            </footer>\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport Avatar from 'react-avatar';\n\nconst Client = ({ username }) => {\n    return (\n        <div className=\"client\">\n            <Avatar name={username} size={50} round=\"14px\" />\n            <span className=\"userName\">{username}</span>\n        </div>\n    );\n};\n\nexport default Client;\n","import React, { useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\n\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\n    const editorRef = useRef(null);\n    useEffect(() => {\n        async function init() {\n            editorRef.current = Codemirror.fromTextArea(\n                document.getElementById('realtimeEditor'),\n                {\n                    mode: { name: 'javascript', json: true },\n                    theme: 'dracula',\n                    autoCloseTags: true,\n                    autoCloseBrackets: true,\n                    lineNumbers: true,\n                }\n            );\n\n            editorRef.current.on('change', (instance, changes) => {\n                const { origin } = changes;\n                const code = instance.getValue();\n                onCodeChange(code);\n                if (origin !== 'setValue') {\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                        roomId,\n                        code,\n                    });\n                }\n            });\n        }\n        init();\n    }, []);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n\n        return () => {\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\n        };\n    }, [socketRef.current]);\n\n    return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;\n","import React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport ACTIONS from '../Actions';\nimport Client from '../components/Client';\nimport Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport {\n    useLocation,\n    useNavigate,\n    Navigate,\n    useParams,\n} from 'react-router-dom';\n\nconst EditorPage = () => {\n    const socketRef = useRef(null);\n    const codeRef = useRef(null);\n    const location = useLocation();\n    const { roomId } = useParams();\n    const reactNavigator = useNavigate();\n    const [clients, setClients] = useState([]);\n\n    useEffect(() => {\n        const init = async () => {\n            socketRef.current = await initSocket();\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n            function handleErrors(e) {\n                console.log('socket error', e);\n                toast.error('Socket connection failed, try again later.');\n                reactNavigator('/');\n            }\n\n            socketRef.current.emit(ACTIONS.JOIN, {\n                roomId,\n                username: location.state?.username,\n            });\n\n            // Listening for joined event\n            socketRef.current.on(\n                ACTIONS.JOINED,\n                ({ clients, username, socketId }) => {\n                    if (username !== location.state?.username) {\n                        toast.success(`${username} joined the room.`);\n                        console.log(`${username} joined`);\n                    }\n                    setClients(clients);\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\n                        code: codeRef.current,\n                        socketId,\n                    });\n                }\n            );\n\n            // Listening for disconnected\n            socketRef.current.on(\n                ACTIONS.DISCONNECTED,\n                ({ socketId, username }) => {\n                    toast.success(`${username} left the room.`);\n                    setClients((prev) => {\n                        return prev.filter(\n                            (client) => client.socketId !== socketId\n                        );\n                    });\n                }\n            );\n        };\n        init();\n        return () => {\n            socketRef.current.disconnect();\n            socketRef.current.off(ACTIONS.JOINED);\n            socketRef.current.off(ACTIONS.DISCONNECTED);\n        };\n    }, []);\n\n    async function copyRoomId() {\n        try {\n            await navigator.clipboard.writeText(roomId);\n            toast.success('Room ID has been copied to your clipboard');\n        } catch (err) {\n            toast.error('Could not copy the Room ID');\n            console.error(err);\n        }\n    }\n\n    function leaveRoom() {\n        reactNavigator('/');\n    }\n\n    if (!location.state) {\n        return <Navigate to=\"/\" />;\n    }\n\n    return (\n        <div className=\"mainWrap\">\n            <div className=\"aside\">\n                <div className=\"asideInner\">\n                    <div className=\"logo\">\n                        <img\n                            className=\"logoImage\"\n                            src=\"/code-sync.png\"\n                            alt=\"logo\"\n                        />\n                    </div>\n                    <h3>Connected</h3>\n                    <div className=\"clientsList\">\n                        {clients.map((client) => (\n                            <Client\n                                key={client.socketId}\n                                username={client.username}\n                            />\n                        ))}\n                    </div>\n                </div>\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\n                    Copy ROOM ID\n                </button>\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\n                    Leave\n                </button>\n            </div>\n            <div className=\"editorWrap\">\n                <Editor\n                    socketRef={socketRef}\n                    roomId={roomId}\n                    onCodeChange={(code) => {\n                        codeRef.current = code;\n                    }}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default EditorPage;\n","import { io } from 'socket.io-client';\n\nexport const initSocket = async () => {\n    const options = {\n        'force new connection': true,\n        reconnectionAttempt: 'Infinity',\n        timeout: 10000,\n        transports: ['websocket'],\n    };\n    return io(process.env.REACT_APP_BACKEND_URL, options);\n};\n","import './App.css';\nimport React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { Toaster } from 'react-hot-toast';\nimport Home from './pages/Home';\nimport EditorPage from './pages/EditorPage';\n\nfunction App() {\n    return (\n        <>\n            <div>\n                <Toaster\n                    position=\"top-right\"\n                    toastOptions={{\n                        success: {\n                            theme: {\n                                primary: '#4aed88',\n                            },\n                        },\n                    }}\n                ></Toaster>\n            </div>\n            <BrowserRouter>\n                <Routes>\n                    <Route path=\"/\" element={<Home />}></Route>\n                    <Route\n                        path=\"/editor/:roomId\"\n                        element={<EditorPage />}\n                    ></Route>\n                </Routes>\n            </BrowserRouter>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}